<link rel="stylesheet" href="http://code.jquery.com/ui/1.10.0/themes/base/jquery-ui.css" />
<link rel="stylesheet" href="http://twitter.github.com/bootstrap/assets/css/bootstrap-responsive.css" />

<header id="overview" class="subhead">
  <div class="container">
    <h1>Backbone list lib</h1>
    <p class="lead">Библиотека пользовательских компонент для для фреймворка Backbone.</p>
  </div>
</header>
<div class="container">
  <div class="row">
    <div class="span3  bs-docs-sidebar">

      <ul class="nav nav-list bs-docs-sidenav">
        <li><a href="#about">О проекте<i class="icon-chevron-right"></i></a></li>
        <li><a href="#base">Базовый список<i class="icon-chevron-right"></i></a></li>

        <li><a href="#mixin2">Удаляемые<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin3">Drag and Drop<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin5">Редактируемые<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin8">Выбор действия<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin6">Подсписки<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin">Примешивание<i class="icon-chevron-right"></i></a></li>

        <li><a href="#mixin7">Комбин. функ.<i class="icon-chevron-right"></i></a></li>

        <li><a href="#mixin9">Живой поиск<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin10">Переключатель<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin11">Datapicker<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin12">Модальное окно<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin15">Добавление<i class="icon-chevron-right"></i></a></li>
        <li><a href="#mixin13">Форма ввода<i class="icon-chevron-right"></i></a></li>
      </ul>
    </div>
    <div class="span9">
    <%=render 'partial_0'%>
    <%=render 'partial_1'%>
    <%=render 'partial_2'%>
    <%=render 'partial_3'%>
    <%=render 'partial_4'%>
    <%=render 'partial_5'%>
      <section id="mixin6">
        <div class="page-header">
          <h1>Подсписки</h1>
        </div>
          <h3>Объявление представления</h3>
        В данном примере объявляется простой список с подсписками, причем вложенный список обладает функциональностью
        редактирования значения полей
        <pre>
TiragSales.Views.UsersWithRelational=
    Backbone.View
    .extend(BackList.Mixins.list)
    .extend(BackList.Mixins.init)
    .extend({
        initialize: function(options){
            this.proto(options);
        },
        render: function() {
            this._render(this.$el, this.collection,this._item,'list');
            return this;
        },

        _item : Backbone.View  //обращаем внимание элемент списка обладает функциональностью
                               // списка
            .extend(BackList.Mixins.init)
            .extend(BackList.Mixins.item)
            .extend(BackList.Mixins.list)
            .extend({
                template: JST['users/item_with_relational'],
                template_not_item: JST['users/not_item'],
                tagName:  "tr",
                c_line : [],
                initialize: function(options){
                    this.proto(options)
                    if(this.model!=null){
                        var phones=this.model.get_relational('phones');// здесь у нас функция для взятия подсписка
                        phones.on('reset', this.render, this)// она возвращает коллекцию
                               .on("sync", this.render, this);
                    }
                },
                render: function() {

                    if(this.model!=null){
                        var phones=this.model.get_relational('phones')
                        this._render_item(); // отрисовка элемента списка
                        this._render('.js-list-in',phones,this._item,'c_line');// отрисовка подсписка
                    }
                    return this;
                },

                _item : Backbone.View
                    .extend(BackList.Mixins.init)
                    .extend(BackList.Mixins.item)
                    .extend(BackList.Mixins.edit_item)// функциональность редактирования
                    .extend({
                        template: JST['users/item_with_relational_phones'],
                        template_not_item: JST['users/not_item'],
                        tagName:  "div",

                        initialize: function(options){
                            this.proto(options);
                        }
                    })

            })

    });
        </pre>

          <h3>Объявление Коллекции</h3>
        <pre>

TiragSales.Collections.UsersWithRelational = BackList.Collections.Basic.extend({
    model : TiragSales.Models.UserWithRelational
})
          </pre>
          <h3>Объявление Модели</h3>
        <pre>
TiragSales.Models.UserWithRelational = BackList.Models.Basic.extend({
    nameModel: 'user',
    _phones: BackList.Collections.Basic.extend({ // коллекция подсписка, ищется по имени атрибута с подсписком
        model: BackList.Models.Basic.extend({
            nameModel: 'phone',
            url_for_update_phone: function(id){
                return 'phones'+'/'+this.id
            }
        })
    })
})
})


        </pre>

          <h3>Вызов</h3>
        <pre>
var collection = new TiragSales.Collections.UsersWithRelational([
          {id:1,name : 'Kita1', phones: [{id :36,phone :1231223}, {id :31,phone :11723123}, {id :33,phone :136323123}]},
          {id:2,name : 'Kita2' , phones: [{id :311,phone :123123}, {id :3123,phone :1283123}, {id :32123,phone :1239123}]},
          {id:3,name : 'Kita3', phones: [{phone :123123}]}],
          {url : 'users'})
          new TiragSales.Views.UsersWithRelational({el: $('#list_56').get(0), collection : collection})
        </pre>




          <script type="text/javascript">
              $(function(){
                  var collection = new TiragSales.Collections.UsersWithRelational([
                                                                {id:1,name : 'Kita1', phones: [{id :36,phone :1231223}, {id :31,phone :11723123}, {id :33,phone :136323123}]},
                                                                {id:2,name : 'Kita2' , phones: [{id :311,phone :123123}, {id :3123,phone :1283123}, {id :32123,phone :1239123}]},
                                                                {id:3,name : 'Kita3', phones: [{phone :123123}]}],
                                                            {url : 'users'})
                  new TiragSales.Views.UsersWithRelational({el: $('#list_56').get(0), collection : collection})
              })
          </script>
          <h3>Пример подсписка</h3>
          <table class="table-bordered table" id="list_56"></table>

      </section>
      <section id="mixin">
        <div class="page-header">
          <h1>Примешивание</h1>
        </div>
        <h3>Объявление</h3>
        <pre>
TiragSales.Views.UsersWithDeleteAndEdit = BackList.Views.List
                                        .extend(BackList.Mixins.list_with_delete)
                                        .extend(BackList.Mixins.list_with_edit)
                                        .extend({
    initialize:function () {
        this.proto();
    },
    render:function () {
        this._render(this.$el, this.collection, this._item, 'list');
        return this;
    },
    _item:BackList.Views.Item.extend({
        template:JST['users/item_with_all'],
        template_not_item:JST['users/not_item'],
        tagName:"tr",
        initialize:function (options) {
            this.proto(options);
        }
    })
});
        </pre>
        <h3>Вызов</h3>
        <pre>
          var collection = new TiragSales.Collections.Users([
                                                                {id: 1,name : 'Kita'},
                                                                {id: 1,name : 'Kita'},
                                                                {id: 1,name : 'Kita'}
                                                            ],
                                                            {url : 'users'})
          new TiragSales.Views.UsersWithDeleteAndEdit({el: $('#list_111').get(0), collection : collection})
        </pre>

        <script type="text/javascript">
            $(function(){
                var collection = new TiragSales.Collections.Users([{name : 'Kita'},{name : 'Kita'},{name : 'Kita'}],{url : 'users'})
                new TiragSales.Views.UsersWithDeleteAndEdit({el: $('#list_111').get(0), collection : collection})
            })

        </script>
        <h3>Пример</h3>
        <table class="table table-bordered" id="list_111">

        </table>
      </section>
      <section id="mixin7">
        <div class="page-header">
          <h1>Button groups</h1>
        </div>
      </section>
      <section id="mixin9">
        <div class="page-header">
          <h1>Живой поиск</h1>
        </div>


        <h3>Класс живого поиска</h3>
  <pre>
  BackList.Views.Filter = Backbone.View
    .extend(BackList.Mixins.init)//миксин модуля наследования
    .extend({
        template:JST['module/filter'],// шаблон
        timer:0,// переменная таймера
        events:{
            "keyup .js-filter":'filter',// навесил обработчик ввода
            "click .js-button-click":'Timer'// клик на кнопку немедленног запроса
        },
        initialize:function (options) {
            this.proto();
            this.render();

        },
        render:function () {
            this.collection.setFilter(this.model.name,this.model.value)// установка в коллекцию фильтра
            var item = this.options.model || {};
            var template = $(this.template({data:item}))
            this.copyAttr(template, this.$el)
            this.$el.html(template.html()) //здесь уже отрисован шаблон на странице
            return this;
        },
        // метод копирования атрибутов с корня элемента шаблона
        // на элемент страницы на которую он встраивается
        copyAttr:function (from, to) {
            var attributes = from.get(0).attributes
            var attr = {};
            _.each(attributes, function (item) {
                attr[item.nodeName] = item.value;
            }, this)
            to.attr(attr)
        },
//принудительная отправка запроска к серверу
// сбрасывается таймер
        Timer:function () {
            this.collection.fetch();
            clearTimeout(this.timer)
        },
//обработка на нажатие клавиш
//ставит таймер если следующее нажатие менее чем за 0.5 сек то предыдущий
// сбрасывается и ставиться новый
        filter:function (a) {
            var val = this.$('.js-filter');
            this.collection.setFilter(val.attr('name'),val.val());
            var $context = this;
            clearTimeout(this.timer)
            this.timer = setTimeout(function () {
                $context.Timer()
            }, 500)
            if (val.val().length >= 6 || val.val().length == 0) {

                this.collection.fetch();
                clearTimeout(this.timer)
            }
        }


    });
  </pre>


        <h3>Вызов</h3>
        <pre>
var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
new BackList.Views.Filter({el: $('#item_21').get(0),model: {name:'filter2',value:'123'}, collection: collection})
new TiragSales.Views.Users({el: $('#list_13').get(0), collection : collection})
new BackList.Views.Filter({el: $('#item_22').get(0),model: {name:'filter1',value:''}, collection: collection});
        </pre>
        <script type="text/javascript">
            $(function(){
                var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
                new TiragSales.Views.Users({el: $('#list_13').get(0), collection : collection})
                new BackList.Views.Filter({el: $('#item_21').get(0),model: {name:'filter2',value:'123'}, collection: collection})
                new BackList.Views.Filter({el: $('#item_22').get(0),model: {name:'filter1',value:''}, collection: collection});


            })

        </script>
        <h3>Пример</h3>
        <div id="item_21"></div>
        <div id="item_22"></div>
        <table class="table-bordered table" id="list_13">

        </table>
      </section>
      <section id="mixin10">
        <div class="page-header">
            <h1>Выбор категории</h1>
          </div>
          <h3>Вызов</h3>
        <pre>
    var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
    new TiragSales.Views.Users({el: $('#list_1').get(0), collection : collection})
    new BackList.Views.Checked({el: $('#item_16').get(0),model:{type: 'checkbox',name:'filter1', items: [{value:'1',title:'1'},{value:'2',title:'2'}]}, collection: collection})
    new BackList.Views.Checked({el: $('#item_17').get(0),model:{type: 'radiobox',name:'filter2', items: [{value:'1',title:'1'},{value:'2',title:'2'}]}, collection: collection})
    new BackList.Views.Checked({el: $('#item_18').get(0),model:{type: 'checkbox',name:'filter3', items: [{value:'1',title:'1'},{value:'2',title:'2'},{value:'3',active: true,title:'3'}]}, collection: collection})
        </pre>
          <script type="text/javascript">
              $(function(){
                  var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
                  new TiragSales.Views.Users({el: $('#list_12').get(0), collection : collection})
                  new BackList.Views.Checked({el: $('#item_16').get(0),model:{type: 'checkbox',name:'filter1', items: [{value:'1',title:'1'},{value:'2',title:'2'}]}, collection: collection})
                  new BackList.Views.Checked({el: $('#item_17').get(0),model:{type: 'radiobox',name:'filter2', items: [{value:'1',title:'1'},{value:'2',title:'2'}]}, collection: collection})
                  new BackList.Views.Checked({el: $('#item_18').get(0),model:{type: 'checkbox',name:'filter3', items: [{value:'1',active: true,title:'1'},{value:'2',title:'2'},{value:'3',active: true,title:'3'}]}, collection: collection})


              })

          </script>
          <h3>Пример</h3>
          <div id="item_16"></div>
          <div id="item_17"></div>
          <div id="item_18"></div>
          <div id="item_19"></div>
          <div id="item_20"></div>
          <table class="table-bordered table" id="list_12">

          </table>
      </section>
      <section id="mixin11">
        <div class="page-header">
          <h1>Datapicker</h1>
        </div>

        <h3>Вызов</h3>
        <pre>
  var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
  new TiragSales.Views.UsersWithModal({el: $('#list_11').get(0), collection : collection})
  new BackList.Views.FilterDate({el: $('#item_11').get(0),model: {name:'date_to',value:''}, collection: collection})
  new BackList.Views.FilterDate({el: $('#item_12').get(0),model: {name:'date_from',value:''}, collection: collection})
  new BackList.Views.Modal({el: $('#item_14').get(0),model : {title : "Количество"},template:JST['users/modal'], collection: collection})
  new BackList.Views.FilterDate({el: $('#item_13').get(0),model: {name:'date',value:'29.01.2013'},template:JST['users/add_item_body'], collection: collection})

        </pre>
        <script type="text/javascript">
            $(function(){
                var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
                new TiragSales.Views.UsersWithModal({el: $('#list_11').get(0), collection : collection})
                new BackList.Views.FilterDate({el: $('#item_11').get(0),model: {name:'date_to',value:''}, collection: collection})
                new BackList.Views.FilterDate({el: $('#item_12').get(0),model: {name:'date_from',value:''}, collection: collection})
                new BackList.Views.Modal({el: $('#item_14').get(0),model : {title : "Количество"},template:JST['users/modal'], collection: collection})
                new BackList.Views.FilterDate({el: $('#item_13').get(0),model: {name:'date',value:'29.01.2013'},template:JST['users/add_item_body'], collection: collection})


            })

        </script>
        <h3>Пример</h3>
        <div id="item_11"></div>
        <div id="item_12"></div>
        <div id="item_13"></div>
        <table class="table-bordered table" id="list_11">

        </table>
      </section>
      <section id="mixin12">
        <div class="page-header">
          <h1>Модальное окно</h1>
        </div>
        <h3>Класс Модального окна</h3>
        <pre>
BackList.Views.Modal = Backbone.View.extend({
    template:JST['module/modal'],//два темплейта для окантовки
    template_body :_.template(''),// и для тела модального окна
    $currentTarget:'',
    initialize:function (options) {
        this.template_body=options.template || this.template_body;// здесь передается тело
        this.collection.on('showModal',this.showModal,this)//подписаться на событие коллекции
            .on("sync", this.sync,this)
            .on("error", this.error,this);
        this.render();
    },
    render:function () {
        var item = this.options.model || {};
        var template = $(this.template({data:item}))
        this.copyAttr(template, this.$el)
        this.$el.html(template.html())
        return this;
    },
    copyAttr:function (from, to) {
        var attributes = from.get(0).attributes
        var attr = {};
        _.each(attributes, function (item) {
            attr[item.nodeName] = item.value;
        }, this)
        to.attr(attr)
    },

    events:{
        'click .ok':'save'
    },
    save:function () {//сохранение модели на сервере
        var form=this.$('form'),
            data={},
            model = this.currentModel;
        $('input',form).add('textarea',form).each(function(){
            var $this=$(this);
            data[$this.attr('name')]=$this.val();
        })
        $('input:checked',form).each(function(){
            data.elem[$(this).attr('name')]=$(this).val();
        });
        var url= model['url_for_update'] ? $.proxy(model['url_for_update_'+name],model) : $.proxy(model.url,model);
        model.save(data,{url : url('modal')})



    },
    sync : function (data) {
        this.$el.modal('hide')
    },
    error : function (a,b,c) {
        var error = eval('('+a.responseText+')')
        this.showError(error)

    },
    showError : function(error){
        var  name ={multiple_count : 'Ошибка'};
        if(error!=null){
            var form=this.$('form')
            $('.error',form).remove()
            _.each(error,function(val,key){
                _.each(_.uniq(val),function(value){
                    name[key]
                    form.append('<p class="error">'+ name[key]+': '+ value+'</p>')
                },this)
            },this)

        }
    },
    // обработчик события {showModal} коллекции, с данным событием
    // передается и выбранная  модель из коллекции
    showModal:function (model) {
        this.currentModel=model;//запомнить текущую модель
        //отрисовать внутренность модального окна с учетом данных модели
        this.$('.modal-body').html(this.template_body({data : model.toJSON()[model.nameModel],model :this.model}))
        this.$el.modal('show')//показать модальное окно, это функция из твиттера бутстрапа
    }
})        </pre>
        <h3>Пример класса модифицированного для показа Модального окна</h3>
        <pre>
               TiragSales.Views.UsersWithModal = BackList.Views.List.extend({
    initialize:function () {
        this.proto();
    },
    render:function () {
        this._render(this.$el, this.collection, this._item, 'list');
        return this;
    },
    _item:BackList.Views.Item.extend({
        template:JST['users/item'],
        template_not_item:JST['users/not_item'],
        tagName:"tr",
        events : {
            'click' : 'showModal' //клик
        },
        showModal : function(){
             this.model.collection.trigger('showModal',this.model)// вот что генерит событие для окна
        },
        initialize:function (options) {
            this.proto(options);
        }
    })
});
        </pre>
        <h3>Вызов</h3>
        <pre>
                var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
                new TiragSales.Views.UsersWithModal({el: $('#list_11').get(0), collection : collection})
                new BackList.Views.Modal({el: $('#item_14').get(0),model : {title : "Количество"},template:JST['users/modal'], collection: collection})
        </pre>
        <script type="text/javascript">
            $(function(){
                var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
                new TiragSales.Views.UsersWithModal({el: $('#list_19').get(0), collection : collection})
                new BackList.Views.Modal({el: $('#item_89').get(0),model : {title : "Количество"},template:JST['users/modal'], collection: collection})
            })

        </script>
        <h3>Пример</h3>
        <div id="item_89"></div>
        <table class="table-bordered table" id="list_19">

        </table>
      </section>
    <section id="mixin15">
      <div class="page-header">
        <h1>Добавление</h1>
      </div>


      <h3>Класс добавления</h3>
  <pre>
BackList.Views.AddItem = Backbone.View.extend({
    template:JST['module/add_item'],
    template_body :_.template(''),
    events: {
        "click .js-add-button": 'add',
        "click .js-minus-button": 'addClose',
        "submit form": 'save'
    },
    flag: [],
    initialize: function(options) {
        this.template_body=options.template || this.template_body;
        this.collection.on("sync", this.sync,this)
            .on("error", this.error,this);
        this.render();
    },
    render:function () {
        var item = this.options.model || {};
        var template = $(this.template({data:item,template_body :this.template_body({data:item})}))
        this.copyAttr(template, this.$el)
        this.$el.html(template.html())
        return this;
    },
    copyAttr:function (from, to) {
        var attributes = from.get(0).attributes
        var attr = {};
        _.each(attributes, function (item) {
            attr[item.nodeName] = item.value;
        }, this)
        to.attr(attr)
    },
    add: function(a){
        this.display_add(null,a);
        return false;
    },

    display_add  : function(error,a){    //отображение формы ввода с ошибками или без
        var name={inn: 'Инн', kpp : 'Кпп', name : 'Название' }
        if(error!=null){
            var form=this.$('form')
            $('.error',form).remove()
            _.each(error,function(val,key){
                _.each(_.uniq(val),function(value){
                    form.append('<p class="error">'+ name[key]+': '+ value+'</p>')
                },this)
            },this)

        }else{
            this.$('.js-add-button').addClass('hidden');
            this.$('.js-minus-button').removeClass('hidden');
            this.$('.js-add').slideDown("slow");
            $()
        }
    },

    addClose: function(a){
        this.$('.js-add').slideUp("slow");
        this.$('.js-add-button').removeClass('hidden');
        this.$('.js-minus-button').addClass('hidden');
        return false;
    },

    sync: function(a,b,c){
        this.addClose();
        this.block('save',true);
    },
    error: function(a,b,c){
    },
    block: function(param,bool){  //флаг на блокирование параметра
        if(bool!=undefined)
            this.flag[param]=bool;
        else
            return this.flag[param];
    },



    save: function(){
        var form=this.$('.js-add')
        var data={};
        $('input',form).add('textarea',form).each(function(){
            var $this=$(this);
            data[$this.attr('name')]=$this.val();
        })
        this.block('save',false)
        this.collection.create(data)



        return false;
    }


})
  </pre>


      <h3>Вызов</h3>
        <pre>
var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
new BackList.Views.AddItem({el: $('#item_222').get(0),template: JST['users/add_item_body'], collection: collection})
new TiragSales.Views.Users({el: $('#list_132').get(0), collection : collection})
        </pre>
      <script type="text/javascript">
          $(function(){
              var collection = new TiragSales.Collections.Users([{id:1,name : 'Kita'},{id:2,name : 'Kita'},{id:3,name : 'Kita'}],{url : 'users'})
              new BackList.Views.AddItem({el: $('#item_222').get(0),template: JST['users/add_item_body'], collection: collection})
              new TiragSales.Views.Users({el: $('#list_132').get(0), collection : collection})
          })

      </script>
      <h3>Пример</h3>
      <div id="item_222"></div>
      <table class="table-bordered table" id="list_132">

      </table>
    </section>
      <section id="mixin13">
        <div class="page-header">
          <h1>Форма ввода</h1>
        </div>
        Пусть леша коментирует того монстра беее
      </section>
    </div>
  </div>

</div>
<footer class="footer">
  <div class="container">
    <p>Designed and built with all the love in the world by <a target="_blank" href="http://twitter.com/mdo">@mdo</a> and <a target="_blank" href="http://twitter.com/fat">@fat</a>.</p>
    <p>Code licensed under <a target="_blank" href="http://www.apache.org/licenses/LICENSE-2.0">Apache License v2.0</a>, documentation under <a href="http://creativecommons.org/licenses/by/3.0/">CC BY 3.0</a>.</p>
    <p><a href="http://glyphicons.com">Glyphicons Free</a> licensed under <a href="http://creativecommons.org/licenses/by/3.0/">CC BY 3.0</a>.</p>
    <ul class="footer-links">
      <li><a href="http://blog.getbootstrap.com">Blog</a></li>
      <li class="muted">·</li>
      <li><a href="https://github.com/twitter/bootstrap/issues?state=open">Issues</a></li>
      <li class="muted">·</li>
      <li><a href="https://github.com/twitter/bootstrap/wiki">Roadmap and changelog</a></li>
    </ul>
  </div>
</footer>

